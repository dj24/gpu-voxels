#pragma kernel CSMain

RWStructuredBuffer<float3> vertexBuffer;
RWStructuredBuffer<float3> normalBuffer;
RWStructuredBuffer<float3> colourBuffer;
RWStructuredBuffer<uint> indexBuffer;
ConsumeStructuredBuffer<uint4> faceBuffer;

Texture3D<float4> inputTexture;

uint GetVertexIndex(uint vIndex, uint tri){
    uint2x3 indices = {
        0, 1, 2,
        1, 3, 2,
    };
    return indices[tri][vIndex];
}

float3 GetNormal(uint faceIndex){
    float3 normals[6] = {
        float3(0,1,0),
        float3(0,-1,0),
        float3(1,0,0),
        float3(-1,0,0),
        float3(0,0,1),
        float3(0,0,-1)
    };
    return normals[faceIndex];
}

float4x3 GetVertices(uint faceIndex){
    float4x3 vertices = {
        0, 0, 0,
        0, 0, 0,
        0, 0, 0,
        0, 0, 0
    };
    switch(faceIndex){
        case 0:
        {
            vertices[0] = float3(0, 1, 0);
            vertices[1] = float3(0, 1, 1);
            vertices[2] = float3(1, 1, 0);
            vertices[3] = float3(1, 1, 1);
            break;
        }
        case 1:
        {
            vertices[0] = float3(0, 0, 0);
            vertices[1] = float3(1, 0, 0);
            vertices[2] = float3(0, 0, 1);
            vertices[3] = float3(1, 0, 1);
            break;
        }
        case 2:
        {
            vertices[0] = float3(1, 0, 0);
            vertices[1] = float3(1, 1, 0);
            vertices[2] = float3(1, 0, 1);
            vertices[3] = float3(1, 1, 1);
            break;
        }
        case 3:
        {
            vertices[0] = float3(0, 0, 0);
            vertices[1] = float3(0, 0, 1);
            vertices[2] = float3(0, 1, 0);
            vertices[3] = float3(0, 1, 1);
            break;
        }
        case 4:
        {
            vertices[0] = float3(0, 0, 1);
            vertices[1] = float3(1, 0, 1);
            vertices[2] = float3(0, 1, 1);
            vertices[3] = float3(1, 1, 1);
            break;
        }
        case 5:
        {
            vertices[0] = float3(0, 0, 0);
            vertices[1] = float3(0, 1, 0);
            vertices[2] = float3(1, 0, 0);
            vertices[3] = float3(1, 1, 0);
            break;
        }
    }
    return vertices;
}

[numthreads(1,1,1)] // 2 tris per face, 6 faces per voxel
void CSMain (uint id : SV_DispatchThreadID, uint trIndex : SV_GroupThreadID){
    uint4 face = faceBuffer.Consume();
    uint3 voxelPosition = face.xyz;
    uint faceIndex = face.w;

    for(uint triIndex = 0; triIndex < 2; triIndex++){
        int id1 = id * 6;
        int id2 = id * 6 + 1;
        int id3 = id * 6 + 2;

        id1 += triIndex * 3;
        id2 += triIndex * 3;
        id3 += triIndex * 3;

        float3 c = inputTexture[voxelPosition].xyz;

        // Get vertices based on face directions
        float3 n = GetNormal(faceIndex);
        float4x3 vertices = GetVertices(faceIndex);

        float3 v1 = voxelPosition + vertices[GetVertexIndex(0, triIndex)];
        float3 v2 = voxelPosition + vertices[GetVertexIndex(1, triIndex)];
        float3 v3 = voxelPosition + vertices[GetVertexIndex(2, triIndex)];

        vertexBuffer[id1] = v1;
        vertexBuffer[id2] = v2;
        vertexBuffer[id3] = v3;

        normalBuffer[id1] = n;
        normalBuffer[id2] = n;
        normalBuffer[id3] = n;

        colourBuffer[id1] = c;
        colourBuffer[id2] = c;
        colourBuffer[id3] = c;

        indexBuffer[id1] = id1;
        indexBuffer[id2] = id2;
        indexBuffer[id3] = id3;
    }
}
